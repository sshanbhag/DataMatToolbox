%-----------------------------------------------------------------------------
% Wav Class
%-----------------------------------------------------------------------------
% DataMat Toolbox
% DW package
% Class Definition
%-----------------------------------------------------------------------------
%	Properties:
%-----------------------------------------------------------------------------
% See also: Stimulus, Noise, Tone, DWdata, Marker, Probe, Unit
%-----------------------------------------------------------------------------

%-----------------------------------------------------------------------------
%	Sharad J. Shanbhag
%	sshanbhag@neomed.edu
%-----------------------------------------------------------------------------
% Created: 18 January, 2012 (SJS)
%
% Revisions:
%-----------------------------------------------------------------------------
% TO DO:
%-----------------------------------------------------------------------------

%*****************************************************************************
%*****************************************************************************
%*****************************************************************************
% class definition
%*** important: superclass declaration must have package name (DW) prepended!
%*****************************************************************************
%*****************************************************************************
%*****************************************************************************
% classdef (ConstructOnLoad = true) Wav < DW.Stimulus
classdef Wav < DW.Stimulus
	%------------------------------------------------------------------------
	%------------------------------------------------------------------------
	%------------------------------------------------------------------------
	% Protected Properties
	%------------------------------------------------------------------------
	properties (SetAccess = protected)
		Filename
		Filepath
	end	% end of properties
	%------------------------------------------------------------------------
	%------------------------------------------------------------------------
	%------------------------------------------------------------------------
	
	%------------------------------------------------------------------------
	%------------------------------------------------------------------------
	%------------------------------------------------------------------------
	% Define methods
	%------------------------------------------------------------------------
	methods	
		%---------------------------------------------------------------------
		%---------------------------------------------------------------------
		% Constructor Method
		%---------------------------------------------------------------------
		function obj = Wav(varargin)
		%---------------------------------------------------------------------	
		% Wav < DW.Stimulus
		% Constructor method
		%---------------------------------------------------------------------
		% Wav()	when called with no arguments, returns empty
		%				Wav object
		%---------------------------------------------------------------------
			DW.DataWaveDefaults;
			%--------------------------------------------------------
			% call superclass constructor
			%--------------------------------------------------------
			obj = obj@DW.Stimulus(varargin);
			%--------------------------------------------------------
			% Noise-specific init
			%--------------------------------------------------------
			if isempty(varargin)
				return
			elseif length(varargin) == 1
				% if no c
				C = R;
			else
				C = varargin{2};
			end
			obj.setValsFromMarker(varargin{1}, C);
		end	% END Wav constructor
		%---------------------------------------------------------------------
		%---------------------------------------------------------------------
		
		%---------------------------------------------------------------------
		%---------------------------------------------------------------------
		% General Methods
		%---------------------------------------------------------------------
		%---------------------------------------------------------------------
		
		%---------------------------------------------------------------------
		%---------------------------------------------------------------------
		function obj = setValsFromMarker(obj, Marker, Channel)
		%---------------------------------------------------------------------
			DW.DataWaveDefaults;
			% set frequency
			if Channel == R
				[obj.Filepath, tmpn, tmpx] = fileparts(Marker.WavFilenameR);
			else
				[obj.Filepath, tmpn, tmpx] = fileparts(Marker.WavFilenameL);
			end
			obj.Filename = [tmpn tmpx];
			clear tmpn tmpx
		end	% END setValsFromMarker
		%---------------------------------------------------------------------
		%---------------------------------------------------------------------

		%---------------------------------------------------------------------
		%---------------------------------------------------------------------
		% Overloaded Methods
		%---------------------------------------------------------------------
		%---------------------------------------------------------------------
		%---------------------------------------------------------------------
		%---------------------------------------------------------------------
		function [mval, mcomp] = match(obj, B)
			% first, check that classes are the same
			if ~strcmpi(class(obj), class(B))
				mval = 0;
				mcomp = 0;
				return
			end
			
			% call superclass method
			[mval_s, mcomp_s] = match@DW.Stimulus(obj, B);
			if ~mval_s
				mval = mval_s;
				mcomp = mcomp_s;
				return
			end
			
			% compare local properties

			% list the properties to match here.  
			matchprop = {	'Filename'	};
			np = length(matchprop);
			% preallocate zeros vector for item comparisons
			mcomp = zeros(np, 1);
			% loop through properties to compare
			for n = 1:np
				mcomp(n) = strcmpi( obj.(matchprop{n}), B.(matchprop{n}) );
			end
			% if they're all 1, 
			if all(mcomp)
				mval = 1;
			else
				mval = 0;
			end
		end	% END match FUNCTION
		%---------------------------------------------------------------------
		%---------------------------------------------------------------------
		
		%---------------------------------------------------------------------
		%---------------------------------------------------------------------
		% set/get Methods
		%---------------------------------------------------------------------
		%---------------------------------------------------------------------
		
	
	end	% End of methods
	%------------------------------------------------------------------------
	%------------------------------------------------------------------------
	%------------------------------------------------------------------------
end	% End of classdef
%*****************************************************************************
%*****************************************************************************
%*****************************************************************************






