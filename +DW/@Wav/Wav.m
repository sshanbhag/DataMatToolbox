%-----------------------------------------------------------------------------
% Wav Class
%-----------------------------------------------------------------------------
% DataMat Toolbox
% DW package
% Class Definition
%-----------------------------------------------------------------------------
%	Properties:
%-----------------------------------------------------------------------------
% See also: Stimulus, Noise, Tone, DWdata, Marker, Probe, Unit
%-----------------------------------------------------------------------------

%-----------------------------------------------------------------------------
%	Sharad J. Shanbhag
%	sshanbhag@neomed.edu
%-----------------------------------------------------------------------------
% Created: 18 January, 2012 (SJS)
%
% Revisions:
%-----------------------------------------------------------------------------
% TO DO:
%-----------------------------------------------------------------------------

%*****************************************************************************
%*****************************************************************************
%*****************************************************************************
% class definition
%*** important: superclass declaration must have package name (DW) prepended!
%*****************************************************************************
%*****************************************************************************
%*****************************************************************************
% classdef (ConstructOnLoad = true) Wav < DW.Stimulus
classdef Wav < DW.Stimulus
	%------------------------------------------------------------------------
	%------------------------------------------------------------------------
	%------------------------------------------------------------------------
	% Protected Properties
	%------------------------------------------------------------------------
	properties (SetAccess = protected)
		Filename
		Filepath
	end	% end of properties
	%------------------------------------------------------------------------
	%------------------------------------------------------------------------
	%------------------------------------------------------------------------
	
	%------------------------------------------------------------------------
	%------------------------------------------------------------------------
	%------------------------------------------------------------------------
	% Define methods
	%------------------------------------------------------------------------
	methods	
		%---------------------------------------------------------------------
		%---------------------------------------------------------------------
		% Constructor Method
		%---------------------------------------------------------------------
		function obj = Wav(varargin)
		%---------------------------------------------------------------------	
		% Wav < DW.Stimulus
		% Constructor method
		%---------------------------------------------------------------------
		% Wav()	when called with no arguments, returns empty
		%				Wav object
		%---------------------------------------------------------------------
			DW.DataWaveDefaults;
			%--------------------------------------------------------
			% call superclass constructor
			%--------------------------------------------------------
			obj = obj@DW.Stimulus(varargin);
			%--------------------------------------------------------
			% Noise-specific init
			%--------------------------------------------------------
			if isempty(varargin)
				return
			elseif length(varargin) == 1
				% if no c
				C = R;
			else
				C = varargin{2};
			end
			obj.setValsFromMarker(varargin{1}, C);
		end	% END Wav constructor
		%---------------------------------------------------------------------
		%---------------------------------------------------------------------
		
		%---------------------------------------------------------------------
		%---------------------------------------------------------------------
		% General Methods
		%---------------------------------------------------------------------
		%---------------------------------------------------------------------
		
		%---------------------------------------------------------------------
		%---------------------------------------------------------------------
		function obj = setValsFromMarker(obj, Marker, Channel)
		%---------------------------------------------------------------------
			DW.DataWaveDefaults;
			% set frequency
			if Channel == R
				[obj.Filepath, tmpn, tmpx] = fileparts(Marker.WavFilenameR);
			else
				[obj.Filepath, tmpn, tmpx] = fileparts(Marker.WavFilenameL);
			end
			obj.Filename = [tmpn tmpx];
			clear tmpn tmpx
		end	% END setValsFromMarker
		%---------------------------------------------------------------------
		%---------------------------------------------------------------------

		%---------------------------------------------------------------------
		%---------------------------------------------------------------------
		% Overloaded Methods
		%---------------------------------------------------------------------
		%---------------------------------------------------------------------
		%---------------------------------------------------------------------

		%---------------------------------------------------------------------
		%---------------------------------------------------------------------
		function varargout = getmatchproperties(obj)
		%---------------------------------------------------------------------
		% [values, names, type] = Stimulus.getmatchproperties
		%---------------------------------------------------------------------
			
			%-----------------------------------------------
			% list the properties to match here.  
			%-----------------------------------------------
			property_name = {	'Filename'	};
			property_type = [ 'c' ];
			nprop = length(property_name);
			% get property values
			if any( nargout == [0 1])
				varargout{1} = cell(nprop, 1);
				for n = 1:nprop
					varargout{1}{n} = obj.(property_name{n});
				end
			end
			% get property names for 2nd output arg
			if nargout == 2
				varargout{2} = property_name;
			end
			% get property type for 3rd output arg
			if nargout == 3
				varargout{3} = property_type;
			end
		end
		%---------------------------------------------------------------------
		%---------------------------------------------------------------------

		%---------------------------------------------------------------------
		%---------------------------------------------------------------------
		function [mval, mcomp] = match(obj, B)
		%---------------------------------------------------------------------
		% [mval, mcomp] = Wav.match(wavobj)
		%---------------------------------------------------------------------
		
			%-----------------------------------------------
			% list the properties to match here.
			%-----------------------------------------------
			[matchprop = {	'Filename'	};
			matchtype = {	'c'	};		% c = char, n = num
			np = length(matchprop);			
			nB = length(B);
			mval = zeros(nB, 1);
			mcomp = cell(nB, 1);
			%-----------------------------------------------
			% loop through the B elements
			%-----------------------------------------------
			for b = 1:nB;
				%-----------------------------------------------
				% first, check that classes are the same
				%-----------------------------------------------
				if ~strcmpi(class(obj), class(B(b)))
					mval(b) = 0;
					mcomp{b} = 0;
				else
					%-----------------------------------------------
					% call superclass method
					%-----------------------------------------------
					[mval_s, mcomp_s] = match@DW.Stimulus(obj, B);
					if ~mval_s
						% if the superclass says they're different, who are 
						% we to complain?
						mval(b) = mval_s;
						mcomp{b} = mcomp_s;
					else
						% preallocate zeros vector for item comparisons
						mcomp{b} = zeros(np, 1);
						% loop through properties to compare
						for n = 1:np
							if matchtype{n} == 'c'
								mcomp{b}(n) = strcmpi( obj.(matchprop{n}), B(b).(matchprop{n}) );
							else
								mcomp{b}(n) = ( obj.(matchprop{n}) == B(b).(matchprop{n}) );								
							end
						end
						% if they're all 1, 
						if all(mcomp{b})
							mval(b) = 1;
						else
							mval(b) = 0;
						end
					end	% END if ~mval_s
				end	% END if ~strcmpi
			end	% END b
		end	% END match FUNCTION
		%---------------------------------------------------------------------
		%---------------------------------------------------------------------
		
		%---------------------------------------------------------------------
		%---------------------------------------------------------------------
		% set/get Methods
		%---------------------------------------------------------------------
		%---------------------------------------------------------------------
		
	
	end	% End of methods
	%------------------------------------------------------------------------
	%------------------------------------------------------------------------
	%------------------------------------------------------------------------
end	% End of classdef
%*****************************************************************************
%*****************************************************************************
%*****************************************************************************






