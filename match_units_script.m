b1 =	[	...
			1	0	1	;	...
			1	1	2	;	...
			1	2	3	;	...
			2	0	4	;	...
			3	0	5	;	...
			3	1	6	;	...
			4	0	7	;	...
			4	1	8	;	...
			4	2	9	;	...
		];
	
b2	=	[	...
			1	0	1	;	...
			1	1	2	;	...
			1	2	3	;	...
			2	0	4	;	...
			3	0	5	;	...
			3	1	6	;	...
			4	0	7	;	...
			4	1	8	;	...
			4	2	9	;	...
		];
		
b3	=	[	...
			1	0	1	;	...
			1	1	2	;	...
			1	2	3	;	...
			2	0	4	;	...
			3	0	5	;	...
			3	1	6	;	...
			4	0	7	;	...
			4	1	8	;	...
			4	2	9	;	...
			4	3	10	;	...
		];


%{
b1 =	[	...
			1	0	1	;	...
			1	1	2	;	...
			2	2	3	;	...
			3	0	4	;	...
			4	1	5	;	...
			4	2	6	;	...
			4	3	7	;	...
		];
	
b2	=	[	...
			1	3	1	;	...
			2	1	2	;	...
			3	1	3	;	...
			3	2	4	;	...
			4	0	5	;	...
			4	1	6	;	...
			4	2	7	;	...
			1	2	1	;	...
		];
		
b3	=	[	...
			4	2	7	;	...
			2	3	2	;	...
			3	3	3	;	...
			4	0	4	;	...
			4	1	5	;	...
			4	3	6	;	...
			4	4	7	;	...
			4	5	8	;	...
		];
%}
	
Cdata = {b1, b2, b3};

Ncond = length(Cdata);

if Ncond == 1
	warning('%s: no need to search, only 1 condition found!', mfilename)
	return
end

for c = 1:Ncond
	nUnitList(c) = length(Cdata{c});
end

% find max, min of # units
[maxNunits, maxIndex] = max(nUnitList);
[minNunits, minIndex] = min(nUnitList);

% loop through the "base" array that has the most units
% This will ensure that the max # of possible probe/unit combinations will
% be tested.

% get the "base" array, and build list of test arrays
baseC = Cdata{maxIndex};
testindex = 1:Ncond;
testindex = testindex(testindex ~= maxIndex);

ntest = length(testindex)
for n = 1:ntest
	testC{n} = Cdata{testindex(n)};
end

M = zeros(maxNunits, Ncond);

% loop through max # units (base array)
for u = 1:maxNunits
	M(u, maxIndex) = u;
	% loop through test arrays
	for t = 1:ntest
		testval = false(nUnitList(testindex(t)), 1);
		testout = zeros(nUnitList(testindex(t)), 1);
		
		% loop through units for current test array
		for r = 1:nUnitList(testindex(t))	
			% compare base pair to test pair
			testval(r) = isequal(baseC(u, 1:2), testC{t}(r, 1:2));
			fprintf('u(%d) vs. t(%d)r(%d) -> ', u, t, r);
			fprintf('%d %d\t\t', baseC(u,1), baseC(u,2));
			fprintf('%d %d\t', testC{t}(r,1), testC{t}(r,2));
			fprintf('=\t%d r(%d)\n', testval(r), r);
			% if found, save the index
			if testval(r)
				testout(r) = r;
			else
				testout(r) = 0;
			end
		end
		
		matchind = find(testout > 0);
		if length(matchind) > 1
			warning('%s: multiple units found!', mfilename)
			M(u, testindex(t)) = testout(matchind(1));
		elseif ~isempty(matchind)
			M(u, testindex(t)) = testout(matchind);
		end	
	end
end



