function [methodinfo,structs,enuminfo,ThunkLibName]=nsDWFile_prototype
%NSDWFILE_PROTOTYPE Create structures to define interfaces found in 'nsAPIdllimp'.

%This function was generated by loadlibrary.m parser version 1.1.6.36 on Mon Sep 16 18:18:46 2013
%perl options:'nsAPIdllimp.i -outfile=nsDWFile_prototype.m'

% see http://www.mathworks.com/support/solutions/en/data/1-63MY7L/index.html?solution=1-63MY7L


ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
ThunkLibName=[];
% extern NS_GETLIBRARYINFO ns_GetLibraryInfo ; 
fcns.name{fcnNum}='ns_GetLibraryInfo'; fcns.calltype{fcnNum}='data'; fcns.LHS{fcnNum}='FcnPtrPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern NS_OPENFILE ns_OpenFile ; 
fcns.name{fcnNum}='ns_OpenFile'; fcns.calltype{fcnNum}='data'; fcns.LHS{fcnNum}='FcnPtrPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern NS_GETFILEINFO ns_GetFileInfo ; 
fcns.name{fcnNum}='ns_GetFileInfo'; fcns.calltype{fcnNum}='data'; fcns.LHS{fcnNum}='FcnPtrPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern NS_CLOSEFILE ns_CloseFile ; 
fcns.name{fcnNum}='ns_CloseFile'; fcns.calltype{fcnNum}='data'; fcns.LHS{fcnNum}='FcnPtrPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern NS_GETENTITYINFO ns_GetEntityInfo ; 
fcns.name{fcnNum}='ns_GetEntityInfo'; fcns.calltype{fcnNum}='data'; fcns.LHS{fcnNum}='FcnPtrPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern NS_GETEVENTINFO ns_GetEventInfo ; 
fcns.name{fcnNum}='ns_GetEventInfo'; fcns.calltype{fcnNum}='data'; fcns.LHS{fcnNum}='FcnPtrPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern NS_GETEVENTDATA ns_GetEventData ; 
fcns.name{fcnNum}='ns_GetEventData'; fcns.calltype{fcnNum}='data'; fcns.LHS{fcnNum}='FcnPtrPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern NS_GETANALOGINFO ns_GetAnalogInfo ; 
fcns.name{fcnNum}='ns_GetAnalogInfo'; fcns.calltype{fcnNum}='data'; fcns.LHS{fcnNum}='FcnPtrPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern NS_GETANALOGDATA ns_GetAnalogData ; 
fcns.name{fcnNum}='ns_GetAnalogData'; fcns.calltype{fcnNum}='data'; fcns.LHS{fcnNum}='FcnPtrPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern NS_GETSEGMENTINFO ns_GetSegmentInfo ; 
fcns.name{fcnNum}='ns_GetSegmentInfo'; fcns.calltype{fcnNum}='data'; fcns.LHS{fcnNum}='FcnPtrPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern NS_GETSEGMENTSOURCEINFO ns_GetSegmentSourceInfo ; 
fcns.name{fcnNum}='ns_GetSegmentSourceInfo'; fcns.calltype{fcnNum}='data'; fcns.LHS{fcnNum}='FcnPtrPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern NS_GETSEGMENTDATA ns_GetSegmentData ; 
fcns.name{fcnNum}='ns_GetSegmentData'; fcns.calltype{fcnNum}='data'; fcns.LHS{fcnNum}='FcnPtrPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern NS_GETNEURALINFO ns_GetNeuralInfo ; 
fcns.name{fcnNum}='ns_GetNeuralInfo'; fcns.calltype{fcnNum}='data'; fcns.LHS{fcnNum}='FcnPtrPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern NS_GETNEURALDATA ns_GetNeuralData ; 
fcns.name{fcnNum}='ns_GetNeuralData'; fcns.calltype{fcnNum}='data'; fcns.LHS{fcnNum}='FcnPtrPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern NS_GETINDEXBYTIME ns_GetIndexByTime ; 
fcns.name{fcnNum}='ns_GetIndexByTime'; fcns.calltype{fcnNum}='data'; fcns.LHS{fcnNum}='FcnPtrPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern NS_GETTIMEBYINDEX ns_GetTimeByIndex ; 
fcns.name{fcnNum}='ns_GetTimeByIndex'; fcns.calltype{fcnNum}='data'; fcns.LHS{fcnNum}='FcnPtrPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern NS_GETLASTERRORMSG ns_GetLastErrorMsg ; 
fcns.name{fcnNum}='ns_GetLastErrorMsg'; fcns.calltype{fcnNum}='data'; fcns.LHS{fcnNum}='FcnPtrPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
methodinfo=fcns;